// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PaymentCleanArchitecture.Persistence.Data;

#nullable disable

namespace PaymentCleanArchitecture.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PaymentCleanArchitecture.Domain.Entities.Fee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FeeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fees");
                });

            modelBuilder.Entity("PaymentCleanArchitecture.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PaymentContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentDestinationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentDestinationId1")
                        .HasColumnType("int");

                    b.Property<string>("PaymentLastMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentRefId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("RequiredAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentDestinationId1");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("PaymentCleanArchitecture.Domain.Entities.PaymentDestination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DesLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DesSortIndex")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentDestinationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentDestinationId");

                    b.ToTable("PaymentDestinations");
                });

            modelBuilder.Entity("PaymentCleanArchitecture.Domain.Entities.PaymentSignature", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentId1")
                        .HasColumnType("int");

                    b.Property<string>("SignAlgo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SignDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SignOwn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId1");

                    b.ToTable("PaymentSignatures");
                });

            modelBuilder.Entity("PaymentCleanArchitecture.Domain.Entities.PaymentTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentId1")
                        .HasColumnType("int");

                    b.Property<decimal?>("TranAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("TranDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TranMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranPayload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId1");

                    b.ToTable("PaymentTransactions");
                });

            modelBuilder.Entity("PaymentCleanArchitecture.Domain.Entities.StudentFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FeeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PayAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FeeId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentFees");
                });

            modelBuilder.Entity("PaymentCleanArchitecture.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PaymentCleanArchitecture.Domain.Entities.Payment", b =>
                {
                    b.HasOne("PaymentCleanArchitecture.Domain.Entities.PaymentDestination", "PaymentDestination")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentDestinationId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentDestination");
                });

            modelBuilder.Entity("PaymentCleanArchitecture.Domain.Entities.PaymentDestination", b =>
                {
                    b.HasOne("PaymentCleanArchitecture.Domain.Entities.PaymentDestination", null)
                        .WithMany("PaymentDestinations")
                        .HasForeignKey("PaymentDestinationId");
                });

            modelBuilder.Entity("PaymentCleanArchitecture.Domain.Entities.PaymentSignature", b =>
                {
                    b.HasOne("PaymentCleanArchitecture.Domain.Entities.Payment", "Payment")
                        .WithMany("PaymentSignatures")
                        .HasForeignKey("PaymentId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("PaymentCleanArchitecture.Domain.Entities.PaymentTransaction", b =>
                {
                    b.HasOne("PaymentCleanArchitecture.Domain.Entities.Payment", "Payment")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("PaymentId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("PaymentCleanArchitecture.Domain.Entities.StudentFee", b =>
                {
                    b.HasOne("PaymentCleanArchitecture.Domain.Entities.Fee", "Fee")
                        .WithMany("StudentFees")
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PaymentCleanArchitecture.Domain.Entities.User", "Student")
                        .WithMany("StudentFees")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Fee");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("PaymentCleanArchitecture.Domain.Entities.Fee", b =>
                {
                    b.Navigation("StudentFees");
                });

            modelBuilder.Entity("PaymentCleanArchitecture.Domain.Entities.Payment", b =>
                {
                    b.Navigation("PaymentSignatures");

                    b.Navigation("PaymentTransactions");
                });

            modelBuilder.Entity("PaymentCleanArchitecture.Domain.Entities.PaymentDestination", b =>
                {
                    b.Navigation("PaymentDestinations");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("PaymentCleanArchitecture.Domain.Entities.User", b =>
                {
                    b.Navigation("StudentFees");
                });
#pragma warning restore 612, 618
        }
    }
}
